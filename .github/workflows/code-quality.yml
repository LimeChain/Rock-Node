name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  code-quality:
    name: Build and Basic Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies (protoc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build"

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Build workspace (compile once)
        run: cargo build --workspace --locked --all-targets

      - name: Prepare cargo cache for artifact upload
        run: |
          mkdir -p .cargo
          cp -r ~/.cargo/registry .cargo/ || true
          cp -r ~/.cargo/git .cargo/ || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-workspace-${{ github.sha }}
          path: |
            target/
            .cargo/
            Cargo.lock
          retention-days: 1

  unit-tests:
    name: Unit Tests with Coverage
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-workspace-${{ github.sha }}
          path: .

      - name: Restore cargo cache to home directory
        run: |
          mkdir -p ~/.cargo
          if [ -d ".cargo/registry" ]; then
            cp -r .cargo/registry ~/.cargo/
          fi
          if [ -d ".cargo/git" ]; then
            cp -r .cargo/git ~/.cargo/
          fi

      - name: Install dependencies (protoc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler

      - name: Set up Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: "llvm-tools"

      - name: Install grcov
        run: cargo install grcov

      - name: Run unit tests with coverage
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "target/coverage/default_%p_%m.profraw"
        run: cargo test --workspace --locked --exclude e2e --exclude integration-tests

      - name: Generate lcov report
        run: |
          grcov . \
            --binary-path ./target/debug/deps/ \
            -s . \
            -t lcov \
            --branch \
            --ignore-not-existing \
            -o ./lcov.info \
            --ignore "tests/*" \
            --ignore "/*"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./lcov.info
          fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-workspace-${{ github.sha }}
          path: .

      - name: Restore cargo cache to home directory
        run: |
          mkdir -p ~/.cargo
          if [ -d ".cargo/registry" ]; then
            cp -r .cargo/registry ~/.cargo/
          fi
          if [ -d ".cargo/git" ]; then
            cp -r .cargo/git ~/.cargo/
          fi

      - name: Install dependencies (protoc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler

      - name: Set up Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Run integration tests
        run: cargo test --package integration-tests --lib
        env:
          RUST_LOG: info

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: compiled-workspace-${{ github.sha }}
          path: .

      - name: Restore cargo cache to home directory
        run: |
          mkdir -p ~/.cargo
          if [ -d ".cargo/registry" ]; then
            cp -r .cargo/registry ~/.cargo/
          fi
          if [ -d ".cargo/git" ]; then
            cp -r .cargo/git ~/.cargo/
          fi

      - name: Install dependencies (protoc)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y protobuf-compiler

      - name: Set up Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for E2E tests (using pre-compiled artifacts)
        id: e2e_image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: tests/e2e/Dockerfile.e2e
          tags: rock-node-e2e:latest
          push: false
          load: true
          cache-from: type=gha,scope=rock-node-e2e
          cache-to: type=gha,mode=max,scope=rock-node-e2e

      - name: Run E2E tests (using pre-compiled binaries)
        run: |
          echo "Installing cargo-nextest..."
          cargo install cargo-nextest --locked

          echo "Running E2E tests with retries..."
          cd tests/e2e
          cargo nextest run --retries 2 --no-capture
        env:
          RUST_LOG: info

      - name: Cleanup Docker resources
        if: always()
        run: |
          echo "Cleaning up Docker containers and images..."
          docker container prune -f || true
          docker image rm rock-node-e2e:latest || true
